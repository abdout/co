{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n  defineDocumentType,\r\n  makeSource,\r\n  ComputedFields,\r\n} from 'contentlayer2/source-files';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport remarkGfm from 'remark-gfm';\r\n\r\nconst computedFields: ComputedFields = {\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n  },\r\n  slugAsParams: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n  },\r\n  url: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const docPath = doc._raw.flattenedPath;\r\n      return `/mos/${docPath}`;\r\n    },\r\n  },\r\n  // Extract category, subCategory, and activity from the path\r\n  category: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts[0] || '';\r\n    },\r\n  },\r\n  subCategory: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts.length > 1 ? parts[1] : '';\r\n    },\r\n  },\r\n  activityName: {\r\n    type: 'string',\r\n    resolve: (doc) => {\r\n      const parts = doc._raw.flattenedPath.split('/');\r\n      return parts.length > 2 ? parts[2] : '';\r\n    },\r\n  },\r\n};\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n  name: 'Doc',\r\n  filePathPattern: `docs/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    published: {\r\n      type: 'boolean',\r\n      default: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport const Activity = defineDocumentType(() => ({\r\n  name: 'Activity',\r\n  filePathPattern: `mos/**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    system: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    category: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Doc, Activity],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: 'github-dark',\r\n          onVisitLine(node: any) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: 'text', value: ' ' }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node: any) {\r\n            node.properties.className.push('highlighted');\r\n          },\r\n          onVisitHighlightedWord(node: any) {\r\n            node.properties.className = ['word'];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: ['subheading-anchor'],\r\n            ariaLabel: 'Link to section',\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});"],
  "mappings": "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",
  "names": []
}
