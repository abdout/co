---
description: 
globs: 
alwaysApply: false
---
---
description: Fetching data from the API using SWR
globs: src/**/*.ts src/**/*.tsx
alwaysApply: false
---
# Data Fetching

## Server Components

For server components (default in Next.js App Router), use direct data fetching:

```tsx
import { db } from "@/lib/db";

export default async function ProjectPage({ params }: { params: { id: string } }) {
  const project = await db.project.findUnique({
    where: { id: params.id },
    include: { team: true },
  });
  
  if (!project) {
    return <div>Project not found</div>;
  }
  
  return (
    <div>
      <h1>{project.name}</h1>
      {/* Rest of the component */}
    </div>
  );
}
```

## Client Components with SWR

For client components, use SWR for data fetching:

```tsx
"use client";

import useSWR from 'swr';
import { useState } from 'react';
import { fetchTeamById } from '@/lib/action';

const fetcher = (url: string) => fetch(url).then(res => res.json());

export function TeamDetails({ id }: { id: string }) {
  const { data, error, isLoading, mutate } = useSWR(`/api/teams/${id}`, fetcher);
  
  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error loading team</div>;
  
  return (
    <div>
      <h1>{data.name}</h1>
      {/* Rest of the component */}
      <button onClick={() => mutate()}>Refresh</button>
    </div>
  );
}
```

## Server Actions

For data mutations, use server actions:

```tsx
// src/lib/action.ts
"use server";

import { db } from "@/lib/db";
import { revalidatePath } from "next/cache";

export async function updateTeam(id: string, data: { name: string }) {
  try {
    const team = await db.team.update({
      where: { id },
      data
    });
    
    revalidatePath(`/teams/${id}`);
    return { success: true, team };
  } catch (error) {
    return { success: false, error: "Failed to update team" };
  }
}

// In client component
"use client";

import { updateTeam } from "@/lib/action";
import { useTransition } from "react";

export function UpdateTeamForm({ id }: { id: string }) {
  const [isPending, startTransition] = useTransition();
  const [name, setName] = useState("");
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    startTransition(async () => {
      const result = await updateTeam(id, { name });
      // Handle result
    });
  };
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
      <button type="submit" disabled={isPending}>
        {isPending ? "Updating..." : "Update Team"}
      </button>
    </form>
  );
}
```

## API Routes

For custom API endpoints, create route handlers:

```tsx
// src/app/api/teams/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/db";
import { auth } from "@/auth";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await auth();
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    const { id } = await params;
    const team = await db.team.findUnique({
      where: { id },
    });
    
    if (!team) {
      return NextResponse.json({ error: "Team not found" }, { status: 404 });
    }
    
    return NextResponse.json(team);
  } catch (error) {
    return NextResponse.json({ error: "Internal error" }, { status: 500 });
  }
} 