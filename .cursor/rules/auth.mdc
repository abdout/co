---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
---
description: Modular, reusable auth block for cross-project implementation
globs: **/*
alwaysApply: true
---

# Modular Authentication Block Structure

This project implements a modular, reusable authentication system that can be injected into any project.

## Project Structure

### Core Files
- `auth.ts` - Main Auth.js configuration with callbacks
- `auth.config.ts` - Provider configuration (Google, Facebook, Credentials)
- `middleware.ts` - Auth-based route protection
- `routes.ts` - Route definitions (public, auth, api paths)
- `next-auth.d.ts` - Type definitions for session and user

### Pages
- `src/app/(auth)/login/page.tsx` - Login page
- `src/app/(auth)/join/page.tsx` - Registration page
- `src/app/(auth)/reset/page.tsx` - Password reset page
- `src/app/(auth)/new-password/page.tsx` - New password setup
- `src/app/(auth)/new-verification/page.tsx` - Email verification
- `src/app/(auth)/error/page.tsx` - Auth error page

### API Routes
- `src/app/api/auth/[...nextauth]/route.ts` - Next Auth handlers (exports GET, POST)

### Auth Components & Utilities
- `src/components/auth/` - All reusable auth components and utilities
  - `src/components/auth/login/form.tsx` - Login form component
  - `src/components/auth/login/action.ts` - Login form actions (server actions)
  - `src/components/auth/join/form.tsx` - Registration form component
  - `src/components/auth/join/action.ts` - Registration form actions
  - `src/components/auth/reset/form.tsx` - Password reset form
  - `src/components/auth/password/form.tsx` - Password management
  - `src/components/auth/password/token.ts` - Password reset token handling
  - `src/components/auth/verification/form.tsx` - Email verification
  - `src/components/auth/verification/2f-token.ts` - Two-factor token handling
  - `src/components/auth/verification/2f-confirmation.ts` - Two-factor confirmation
  - `src/components/auth/verification/verification-token.ts` - Email verification token
  - `src/components/auth/social.tsx` - OAuth provider buttons
  - `src/components/auth/card-wrapper.tsx` - Shared auth card component
  - `src/components/auth/header.tsx` - Auth header component
  - `src/components/auth/back-button.tsx` - Back button component
  - `src/components/auth/form-error.tsx` - Error display component
  - `src/components/auth/form-success.tsx` - Success display component
  - `src/components/auth/error-card.tsx` - Auth error page component
  - `src/components/auth/user.ts` - User data retrieval functions
  - `src/components/auth/account.ts` - Account data retrieval functions
  - `src/components/auth/role-gate.tsx` - Role-based access control
  - `src/components/auth/user-button.tsx` - User avatar/menu button
  - `src/components/auth/logout-button.tsx` - Logout button component
  - `src/components/auth/login-button.tsx` - Login button component
  - `src/components/auth/user-info.tsx` - User information display
  - `src/components/auth/validation.ts` - Form validation schemas
  - `src/components/auth/use-current-user.ts` - Hook for current user
  - `src/components/auth/use-current-role.ts` - Hook for current role

### Library Functions
- `src/lib/auth.ts` - Auth helpers (currentUser, currentRole)
- `src/lib/db.ts` - Database connection with Prisma
- `src/lib/mail.ts` - Email sending functionality
- `src/lib/tokens.ts` - Token generation and management

### UI Components
- All UI components are built with:
- **Tailwind CSS v4** - Mobile-first responsive design
- **Sonner** - Toast notifications
- **shadcn/ui** - Re-usable UI components

## Technology Stack

### Authentication
- **Auth.js v5** - Latest version for OAuth and Credentials providers
- **Prisma** - ORM with Auth.js adapter
- **bcryptjs** - Password hashing
- **React Hook Form** - Form management for auth forms
- **Zod** - Schema validation for auth inputs

### OAuth Providers
- **Google** - Google OAuth provider
  - Scopes: email, profile, offline access
- **Facebook** - Facebook OAuth provider
  - Scopes: email, public_profile

### Email Services
- **Resend** - Email delivery for verification and password reset

## Known Issues and Solutions

### Facebook OAuth
- **Issue**: Facebook OAuth may redirect to error page
- **Cause**: Misconfigured callback URLs or incorrect client ID/secret
- **Solution**: 
  1. Ensure callback URL in Facebook Developer Console matches `http://localhost:3000/api/auth/callback/facebook`
  2. Use only one set of credentials (prefer `.env.local` for development)
  3. Add proper error handling to the profile mapping function

### Environment Variables
- Facebook and Google OAuth require properly configured environment variables
- The app uses both `.env` and `.env.local` files, with `.env.local` taking precedence
- Current Facebook app IDs:
  - `.env`: 1798287087385367
  - `.env.local`: 1985407775320438 (prioritized)

## Implementation Guidelines

1. **Modularity First**: Structure components to be easily copied to new projects
2. **Consistent API**: Maintain consistent auth interfaces across projects
3. **Flexible Providers**: Support for Google and Facebook OAuth plus credentials
4. **Proper Error Handling**: Clear error states with toast notifications
5. **Type Safety**: Use TypeScript for all components
6. **Form Validation**: Implement Zod schemas for all forms
7. **Responsive Design**: Mobile-first approach with Tailwind CSS v4

## Debugging Tips
- Enable debug mode in NextAuth configuration for verbose logs
- Use try/catch in provider profile functions with console.log
- Check the network tab for failed OAuth redirects
- Verify callback URLs match exactly with provider settings
- Monitor server logs for authentication errors

## Documentation References
- Auth.js: https://authjs.dev/
- Auth.js Next.js: https://authjs.dev/reference/nextjs
- Auth.js OAuth: https://authjs.dev/getting-started/providers/oauth
- Prisma: https://www.prisma.io/docs
- Facebook Login: https://developers.facebook.com/docs/facebook-login
- Google Identity: https://developers.google.com/identity

## Version Philosophy
Always use the latest update of all technologies in the stack.

## Documentation
A detailed README is available at `src/auth/readme/README.md` 